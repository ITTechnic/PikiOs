#!/usr/bin/env bash
# PikiOs generation script
# This script takes a Raspbian image and adds to it octoprint and verions addons
# Written by Guy Sheffer <guysoft at gmail dot com>
# GPL V3

set -e

source ${COMMON_PATH}

function execute_chroot_script() {
  #move PikiOs filesystem files
  cp -vr --preserve=mode,timestamps $1/filesystem .

  #black magic of qemu-arm-static
  cp `which qemu-arm-static` usr/bin

  echo 'Copy Build Scripts'
  cp -R ${BUILD_SCRIPT__PATH}/onboard ./onboard
  chmod -R 755 ./onboard/
  mv ./onboard/* ./
  rm -rf ./onboard

  cp -R ${ROOT_DIR}/app/assets ./assets
  
  chroot . usr/bin/qemu-arm-static /bin/bash /chroot_script
  
  #cleanup
  rm chroot_script
  rm -rfv filesystem
}

mkdir -p ${PIKI_WORKSPACE}
mkdir -p ${PIKI_MOUNT_PATH}

install_cleanup_trap
install_fail_on_error_trap ${PIKI_MOUNT_PATH}
unmount_image ${PIKI_MOUNT_PATH} force || true


pushd ${PIKI_WORKSPACE}

   if [ -e *.img ]; then
        echo 'Deleting stale output image'
        rm *.img
   fi

   echo 'Unzip Image'
   unzip ${PIKI_ZIP_IMG}
   PIKI_IMG_PATH=`ls | grep .img`
   export PIKI_BUILDBASE=$(basename $PIKI_IMG_PATH)
   if [ -n "${PIKI_IMAGE_ENLARGEROOT}" ]
   then
        # make our image a bit larger so we don't run into size problems...
        enlarge_ext $PIKI_IMG_PATH 2 $PIKI_IMAGE_ENLARGEROOT
   fi

  # mount root and boot partition
  mount_image ${PIKI_IMG_PATH} ${PIKI_MOUNT_PATH}
  if [ -n "${PIKI_APT_CACHE}" ]
  then
    mkdir -p "${PIKI_APT_CACHE}"
    mount --bind "${PIKI_APT_CACHE}" ${PIKI_MOUNT_PATH}/var/cache/apt
  fi

  #Edit pi filesystem
  pushd ${PIKI_MOUNT_PATH}

    #make QEMU boot (remember to return)
    fixLd
    #sed -i 's@include /etc/ld.so.conf.d/\*.conf@\#include /etc/ld.so.conf.d/\*.conf@' etc/ld.so.conf

    # if an additional pre-script is defined, execute that now
    if [ -n "${PIKI_PRESCRIPT}" ] && [ -f ${PIKI_PRESCRIPT}/chroot_script ]; then
      echo "Injecting environment pre script from ${PIKI_PRESCRIPT}..."
      execute_chroot_script {$PIKI_PRESCRIPT} ${PIKI_PRESCRIPT}/chroot_script
    fi

    # if building a variant, execute its pre-chroot script
    if [ -n "${VARIANT_BASE}" ] && [ -f ${VARIANT_BASE}/scripts/pre_chroot_script ]; then
      echo "Injecting variant pre script from ${VARIANT_BASE}..."
      execute_chroot_script ${VARIANT_BASE} ${VARIANT_BASE}/scripts/pre_chroot_script
    fi
 
    # execute the base chroot script
    execute_chroot_script ${PIKI_SCRIPT_PATH} ${PIKI_CHROOT_SCRIPT_PATH}
    
    # if building a variant, execute its post-chroot script
    if [ -n "${VARIANT_BASE}" ] && [ -f ${VARIANT_BASE}/scripts/post_chroot_script ]; then
      echo "Injecting variant post script from ${VARIANT_BASE}..."
      execute_chroot_script ${VARIANT_BASE} ${VARIANT_BASE}/scripts/post_chroot_script
    fi

    # if an additional post-script is defined, execute that now
    if [ -n "${PIKI_POSTSCRIPT}" ] && [ -f ${PIKI_POSTSCRIPT}/chroot_script ]; then
      echo "Injecting environment post script from ${PIKI_POSTSCRIPT}..."
      execute_chroot_script ${PIKI_POSTSCRIPT} ${PIKI_POSTSCRIPT}/chroot_script
    fi

    restoreLd
  popd
  
  # unmount first boot, then root partition
  unmount_image ${PIKI_MOUNT_PATH}
  chmod 777 ${PIKI_IMG_PATH}

  if [ -n "${PIKI_IMAGE_RESIZEROOT}" ]
  then
    # resize image to minimal size + provided size
    minimize_ext ${PIKI_IMG_PATH} 2 ${PIKI_IMAGE_RESIZEROOT}
  fi
popd

